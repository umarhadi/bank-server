name: Unit Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: buildjet-2vcpu-ubuntu-2204

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: bank_server
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd "redis-server --daemonize yes && sleep 1 && redis-cli ping"

    steps:
      - name: Set up Go v1.xx
        uses: actions/setup-go@v5
        with:
          go-version: ^1.22
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/migrate
          which migrate
      - name: Run migrations
        run: make migrateup

      - name: Replace secrets in app.env
        env:
          EMAIL_SENDER_NAME: ${{ secrets.EMAIL_SENDER_NAME }}
          EMAIL_SENDER_ADDRESS: ${{ secrets.EMAIL_SENDER_ADDRESS }}
          EMAIL_SENDER_PASSWORD: ${{ secrets.EMAIL_SENDER_PASSWORD }}
        run: |
          sed -i "s/EMAIL_SENDER_NAME=.*/EMAIL_SENDER_NAME=${EMAIL_SENDER_NAME}/" app.env
          sed -i "s/EMAIL_SENDER_ADDRESS=.*/EMAIL_SENDER_ADDRESS=${EMAIL_SENDER_ADDRESS}/" app.env
          sed -i "s/EMAIL_SENDER_PASSWORD=.*/EMAIL_SENDER_PASSWORD=${EMAIL_SENDER_PASSWORD}/" app.env

      - name: Test & Generate coverage
        continue-on-error: true
        run: make test

      - name: Filter out generated files
        run: | 
          grep -v -E "(doc/statik/statik\.go|db/sqlc/.*\.sql\.go|/pb/|db/mock/store\.go|worker/mock/distributor\.go|mail/mock/sender\.go)" coverage.out > coverage.filtered.out && \
          rm coverage.out

      - name: Test & Generate Reports
        continue-on-error: true
        run: make test_json

      - name: Install JUnit Converter
        run: go install github.com/jstemmer/go-junit-report/v2@latest

      - name: Convert to JUnit
        run: go-junit-report -in test-report.json -iocopy -out report.xml

      - name: Upload to SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload coverage reports to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: umarhadi/bank-server
          files: ./coverage.filtered.out

      - name: Upload test results to Codecov
        if: always()
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./report.xml